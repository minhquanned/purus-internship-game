import { ScriptAttributes } from './script-attributes.js';
import { Script } from './script.js';

class ScriptType extends Script {
	constructor(args) {
		super(args);
		this.__attributes = void 0;
		this.__attributesRaw = void 0;
		this.initScriptType(args);
	}
	static get attributes() {
		if (!this.hasOwnProperty('__attributes')) this.__attributes = new ScriptAttributes(this);
		return this.__attributes;
	}
	initScript(args) {
		Script.prototype.initScript.call(this, args);
		this.__attributes = {};
		this.__attributesRaw = args.attributes || {};
	}
	initScriptType(args) {
		this.initScript(args);
	}
	__initializeAttributes(force) {
		if (!force && !this.__attributesRaw) {
			return;
		}
		for (const key in this.__scriptType.attributes.index) {
			if (this.__attributesRaw && this.__attributesRaw.hasOwnProperty(key)) {
				this[key] = this.__attributesRaw[key];
			} else if (!this.__attributes.hasOwnProperty(key)) {
				if (this.__scriptType.attributes.index[key].hasOwnProperty('default')) {
					this[key] = this.__scriptType.attributes.index[key].default;
				} else {
					this[key] = null;
				}
			}
		}
		this.__attributesRaw = null;
	}
	static extend(methods) {
		for (const key in methods) {
			if (!methods.hasOwnProperty(key)) {
				continue;
			}
			this.prototype[key] = methods[key];
		}
	}
}

export { ScriptType };
