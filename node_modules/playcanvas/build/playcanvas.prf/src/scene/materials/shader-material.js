import { extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { ShaderProcessorOptions } from '../../platform/graphics/shader-processor-options.js';
import { SHADERDEF_SKIN, SHADERDEF_INSTANCING, SHADERDEF_MORPH_POSITION, SHADERDEF_MORPH_NORMAL, SHADERDEF_MORPH_TEXTURE_BASED_INT } from '../constants.js';
import { getProgramLibrary } from '../shader-lib/get-program-library.js';
import { shaderGeneratorShader } from '../shader-lib/programs/shader-generator-shader.js';
import { Material } from './material.js';

class ShaderMaterial extends Material {
	constructor(shaderDesc) {
		super();
		this._shaderDesc = void 0;
		this.shaderDesc = shaderDesc;
	}
	set shaderDesc(value) {
		this._shaderDesc = value ? _extends({}, value) : undefined;
		this.clearVariants();
	}
	get shaderDesc() {
		return this._shaderDesc;
	}
	copy(source) {
		super.copy(source);
		this.shaderDesc = source.shaderDesc;
		return this;
	}
	getShaderVariant(params) {
		const objDefs = params.objDefs;
		const options = {
			defines: this.defines,
			skin: (objDefs & SHADERDEF_SKIN) !== 0,
			useInstancing: (objDefs & SHADERDEF_INSTANCING) !== 0,
			useMorphPosition: (objDefs & SHADERDEF_MORPH_POSITION) !== 0,
			useMorphNormal: (objDefs & SHADERDEF_MORPH_NORMAL) !== 0,
			useMorphTextureBasedInt: (objDefs & SHADERDEF_MORPH_TEXTURE_BASED_INT) !== 0,
			pass: params.pass,
			gamma: params.renderParams.shaderOutputGamma,
			toneMapping: params.renderParams.toneMapping,
			fog: params.renderParams.fog,
			shaderDesc: this.shaderDesc
		};
		const processingOptions = new ShaderProcessorOptions(params.viewUniformFormat, params.viewBindGroupFormat, params.vertexFormat);
		const library = getProgramLibrary(params.device);
		library.register('shader-material', shaderGeneratorShader);
		return library.getProgram('shader-material', options, processingOptions, this.userId);
	}
}

export { ShaderMaterial };
