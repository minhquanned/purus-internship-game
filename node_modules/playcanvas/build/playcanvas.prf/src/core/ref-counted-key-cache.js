import { RefCountedObject } from './ref-counted-object.js';

class Entry extends RefCountedObject {
	constructor(obj) {
		super();
		this.object = void 0;
		this.object = obj;
		this.incRefCount();
	}
}
class RefCountedKeyCache {
	constructor() {
		this.cache = new Map();
	}
	destroy() {
		this.cache.forEach(entry => {
			var _entry$object;
			(_entry$object = entry.object) == null || _entry$object.destroy();
		});
		this.cache.clear();
	}
	clear() {
		this.cache.clear();
	}
	get(key) {
		const entry = this.cache.get(key);
		if (entry) {
			entry.incRefCount();
			return entry.object;
		}
		return null;
	}
	set(key, object) {
		this.cache.set(key, new Entry(object));
	}
	release(key) {
		const entry = this.cache.get(key);
		if (entry) {
			entry.decRefCount();
			if (entry.refCount === 0) {
				var _entry$object2;
				this.cache.delete(key);
				(_entry$object2 = entry.object) == null || _entry$object2.destroy();
			}
		}
	}
}

export { RefCountedKeyCache };
