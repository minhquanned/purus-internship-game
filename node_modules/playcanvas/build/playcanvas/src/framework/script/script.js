import { EventHandler } from '../../core/event-handler.js';
import { SCRIPT_INITIALIZE, SCRIPT_POST_INITIALIZE } from './constants.js';

class Script extends EventHandler {
	constructor(args) {
		super();
		this.app = void 0;
		this.entity = void 0;
		this._enabled = void 0;
		this._enabledOld = void 0;
		this._initialized = void 0;
		this._postInitialized = void 0;
		this.__destroyed = void 0;
		this.__scriptType = void 0;
		this.__executionOrder = void 0;
		this.initScript(args);
	}
	set enabled(value) {
		this._enabled = !!value;
		if (this.enabled === this._enabledOld) return;
		this._enabledOld = this.enabled;
		this.fire(this.enabled ? 'enable' : 'disable');
		this.fire('state', this.enabled);
		if (!this._initialized && this.enabled) {
			this._initialized = true;
			this.fire('preInitialize');
			if (this.initialize) {
				this.entity.script._scriptMethod(this, SCRIPT_INITIALIZE);
			}
		}
		if (this._initialized && !this._postInitialized && this.enabled && !this.entity.script._beingEnabled) {
			this._postInitialized = true;
			if (this.postInitialize) {
				this.entity.script._scriptMethod(this, SCRIPT_POST_INITIALIZE);
			}
		}
	}
	get enabled() {
		return this._enabled && !this._destroyed && this.entity.script.enabled && this.entity.enabled;
	}
	initScript(args) {
		const script = this.constructor;
		this.app = args.app;
		this.entity = args.entity;
		this._enabled = typeof args.enabled === 'boolean' ? args.enabled : true;
		this._enabledOld = this.enabled;
		this.__destroyed = false;
		this.__scriptType = script;
		this.__executionOrder = -1;
	}
	static get scriptName() {
		return this.__name;
	}
}
Script.EVENT_ENABLE = 'enable';
Script.EVENT_DISABLE = 'disable';
Script.EVENT_STATE = 'state';
Script.EVENT_DESTROY = 'destroy';
Script.EVENT_ATTR = 'attr';
Script.EVENT_ERROR = 'error';
Script.__name = null;
Script.__getScriptName = getScriptName;
const funcNameRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s\/]*)\s*/;
function getScriptName(constructorFn) {
	if (typeof constructorFn !== 'function') return undefined;
	if ('name' in Function.prototype) return constructorFn.name;
	if (constructorFn === Function || constructorFn === Function.prototype.constructor) return 'Function';
	const match = `${constructorFn}`.match(funcNameRegex);
	return match ? match[1] : undefined;
}

export { Script, getScriptName };
