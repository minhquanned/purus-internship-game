import { ShaderProcessorOptions } from '../../platform/graphics/shader-processor-options.js';
import { SHADER_FORWARD, GAMMA_NONE, TONEMAP_LINEAR, PARTICLEORIENTATION_SCREEN } from '../constants.js';
import { getProgramLibrary } from '../shader-lib/get-program-library.js';
import { Material } from '../materials/material.js';
import { particle } from '../shader-lib/programs/particle.js';

class ParticleMaterial extends Material {
	constructor(emitter) {
		super();
		this.emitter = null;
		this.emitter = emitter;
	}
	getShaderVariant(params) {
		var _renderParams$shaderO, _renderParams$toneMap;
		const {
			device,
			scene,
			renderParams
		} = params;
		const {
			emitter
		} = this;
		const options = {
			defines: this.defines,
			pass: SHADER_FORWARD,
			useCpu: this.emitter.useCpu,
			normal: emitter.lighting ? emitter.normalMap !== null ? 2 : 1 : 0,
			halflambert: this.emitter.halfLambert,
			stretch: this.emitter.stretch,
			alignToMotion: this.emitter.alignToMotion,
			soft: this.emitter.depthSoftening,
			mesh: this.emitter.useMesh,
			gamma: (_renderParams$shaderO = renderParams == null ? void 0 : renderParams.shaderOutputGamma) != null ? _renderParams$shaderO : GAMMA_NONE,
			toneMap: (_renderParams$toneMap = renderParams == null ? void 0 : renderParams.toneMapping) != null ? _renderParams$toneMap : TONEMAP_LINEAR,
			fog: scene && !this.emitter.noFog ? scene.rendering.fog : 'none',
			wrap: this.emitter.wrap && this.emitter.wrapBounds,
			localSpace: this.emitter.localSpace,
			screenSpace: emitter.inTools ? false : this.emitter.screenSpace,
			blend: this.blendType,
			animTex: this.emitter._isAnimated(),
			animTexLoop: this.emitter.animLoop,
			pack8: this.emitter.pack8,
			customFace: this.emitter.orientation !== PARTICLEORIENTATION_SCREEN
		};
		const processingOptions = new ShaderProcessorOptions(params.viewUniformFormat, params.viewBindGroupFormat, params.vertexFormat);
		const library = getProgramLibrary(device);
		library.register('particle', particle);
		return library.getProgram('particle', options, processingOptions, this.userId);
	}
}

export { ParticleMaterial };
