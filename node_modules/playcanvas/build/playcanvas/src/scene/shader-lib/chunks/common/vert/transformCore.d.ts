declare const _default: "\n\nattribute vec4 vertex_position;\n\nuniform mat4 matrix_viewProjection;\nuniform mat4 matrix_model;\nuniform mat3 matrix_normal;\n\n#ifdef MORPHING\n    uniform vec2 morph_tex_params;\n    attribute uint morph_vertex_id;\n\n    ivec2 getTextureMorphCoords() {\n\n        // turn morph_vertex_id into int grid coordinates\n        ivec2 textureSize = ivec2(morph_tex_params);\n        int morphGridV = int(morph_vertex_id) / textureSize.x;\n        int morphGridU = int(morph_vertex_id) - (morphGridV * textureSize.x);\n        #ifdef WEBGPU\n            // flipY\n            morphGridV = textureSize.y - morphGridV - 1;\n        #endif\n        return ivec2(morphGridU, morphGridV);\n    }\n\n    #ifdef MORPHING_POSITION\n        #ifdef MORPHING_INT\n            uniform vec3 aabbSize;\n            uniform vec3 aabbMin;\n            uniform usampler2D morphPositionTex;\n        #else\n            uniform highp sampler2D morphPositionTex;\n        #endif\n    #endif\n#endif\n\n#ifdef defined(BATCH)\n    #include \"skinBatchTexVS\"\n\n    mat4 getModelMatrix() {\n        return getBoneMatrix(vertex_boneIndices);\n    }\n\n#elif defined(SKIN)\n    #include \"skinTexVS\"\n\n    mat4 getModelMatrix() {\n        return matrix_model * getSkinMatrix(vertex_boneIndices, vertex_boneWeights);\n    }\n\n#elif defined(INSTANCING)\n\n    #include \"transformInstancing\"\n\n#else\n\n    mat4 getModelMatrix() {\n        return matrix_model;\n    }\n\n#endif\n\nvec3 getLocalPosition(vec3 vertexPosition) {\n\n    vec3 localPos = vertexPosition;\n\n    #ifdef MORPHING_POSITION\n\n        ivec2 morphUV = getTextureMorphCoords();\n\n        #ifdef MORPHING_INT\n            vec3 morphPos = vec3(texelFetch(morphPositionTex, ivec2(morphUV), 0).xyz) / 65535.0 * aabbSize + aabbMin;\n        #else\n            vec3 morphPos = texelFetch(morphPositionTex, ivec2(morphUV), 0).xyz;\n        #endif\n\n        localPos += morphPos;\n\n    #endif\n\n    return localPos;\n}\n\n";
export default _default;
