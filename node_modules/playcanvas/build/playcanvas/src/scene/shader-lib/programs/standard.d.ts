/**
 * @import { GraphicsDevice } from '../../../platform/graphics/graphics-device.js'
 */
export const _matTex2D: any[];
export const standard: ShaderGeneratorStandard;
declare class ShaderGeneratorStandard extends ShaderGenerator {
    optionsContext: StandardMaterialOptions;
    optionsContextMin: StandardMaterialOptions;
    generateKey(options: any): string;
    propsMin: string[];
    props: string[];
    /**
     * Get the code with which to to replace '$UV' in the map shader functions.
     *
     * @param {string} transformPropName - Name of the transform id in the options block. Usually "basenameTransform".
     * @param {string} uVPropName - Name of the UV channel in the options block. Usually "basenameUv".
     * @param {object} options - The options passed into createShaderDefinition.
     * @returns {string} The code used to replace "$UV" in the shader code.
     * @private
     */
    private _getUvSourceExpression;
    _addMapDef(name: any, enabled: any): string;
    _addMapDefs(float: any, color: any, vertex: any, map: any, invert: any): string;
    /**
     * Add chunk for Map Types (used for all maps except Normal).
     *
     * @param {string} propName - The base name of the map: diffuse | emissive | opacity | light | height | metalness | specular | gloss | ao.
     * @param {string} chunkName - The name of the chunk to use. Usually "basenamePS".
     * @param {object} options - The options passed into to createShaderDefinition.
     * @param {object} chunks - The set of shader chunks to choose from.
     * @param {object} mapping - The mapping between chunk and sampler
     * @param {string} encoding - The texture's encoding
     * @returns {string} The shader code to support this map.
     * @private
     */
    private _addMap;
    _correctChannel(p: any, chan: any, _matTex2D: any): any;
    /**
     * @param {GraphicsDevice} device - The graphics device.
     * @param {StandardMaterialOptions} options - The create options.
     * @returns {object} Returns the created shader definition.
     */
    createShaderDefinition(device: GraphicsDevice, options: StandardMaterialOptions): object;
}
import { ShaderGenerator } from './shader-generator.js';
import { StandardMaterialOptions } from '../../materials/standard-material-options.js';
import type { GraphicsDevice } from '../../../platform/graphics/graphics-device.js';
export {};
